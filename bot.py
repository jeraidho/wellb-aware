import joblib
from aiogram import Bot, Dispatcher, types, executor
from tools import preprocess, vectorise, clean_db, clean_mutedb
from config import token
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardMarkup, KeyboardButton
from time import sleep
import json
import os

# Load your sklearn model
model = joblib.load("./data/classifier.pkl")
# json database
path = './data/dataset.json'
# Initialize bot and dispatcher
bot = Bot(token=token)
dp = Dispatcher(bot)

# inline buttons
inline_yes = InlineKeyboardButton('–î–∞', callback_data='button_yes')
inline_no = InlineKeyboardButton('–ù–µ—Ç', callback_data='button_no')
inline_kb = InlineKeyboardMarkup().add(inline_yes)
inline_kb.add(inline_no)

inline_contains = InlineKeyboardButton('–°–æ–¥–µ—Ä–∂–∏—Ç', callback_data='inline_yes')
inline_ncontains = InlineKeyboardButton('–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç', callback_data='inline_no')
inline_kb1 = InlineKeyboardMarkup().add(inline_contains)
inline_kb1.add(inline_ncontains)

# keyboard buttons
button_info = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú')
button_testing = KeyboardButton('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞')
button_avoid = KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüö´')
greet_kb = ReplyKeyboardMarkup().add(button_info)
greet_kb.add(button_testing)
greet_kb.add(button_avoid)

# additional buttons
button_stop = KeyboardButton('–°—Ç–æ–ø‚ùå')
testing_kb = ReplyKeyboardMarkup().add(button_stop)
testing_mode_users = {}


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type not in ['group', 'supergroup']:
        response = (
            '<b>–ü—Ä–∏–≤–µ—Ç!</b>‚ú®\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è <i>–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã</i>\n\n'
            '–î–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É, <b><i>–æ–Ω –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã</i></b>'
            '\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π <i>–û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å '
            '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</i>üö´\n\n–ï—Å–ª–∏ –≤–∞–º —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
            '<i>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞</i>\n\n'
            '<i>–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è '
            '–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ</i>')
        await bot.send_message(message.from_user.id, response, parse_mode='HTML', reply_markup=greet_kb)


# message handler
@dp.message_handler()
async def check_suicidal_message(message: types.Message):
    global testing_mode_users

    user_id = message.from_user.id
    # check if user in testing_mode
    if user_id in testing_mode_users and testing_mode_users[user_id] and message.chat.type not in \
                                                                                        ['group', 'supergroup']:
        if message.text == '–°—Ç–æ–ø‚ùå':
            # turning mode off
            testing_mode_users[user_id] = False
            await bot.send_message(message.from_user.id, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ‚ùå', reply_markup=greet_kb)
        else:
            # predict
            prediction = model.predict(vectorise([preprocess(message.text)]))

            if prediction[0]:
                await bot.send_message(message.from_user.id, f'<blockquote>{message.text}</blockquote>\n–°—Ç—Ä–æ–∫–∞'
                                    f' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è',
                                    reply_markup=inline_kb1, parse_mode='HTML')
            else:
                await bot.send_message(message.from_user.id, f'<blockquote>{message.text}</blockquote>\n–°—Ç—Ä–æ–∫–∞'
                                    f' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è',
                                    reply_markup=inline_kb1, parse_mode='HTML')

    else:
        # check if chat is public
        if message.chat.type == 'supergroup' or message.chat.type == 'group':
            # Predict if the message is suicidal
            prediction = model.predict(vectorise([preprocess(message.text)]))

            if prediction[0]:
                admins = [admin for admin in await bot.get_chat_administrators(message.chat.id)
                          if not admin.user.is_bot]

                response = \
                    f'üö®‚ÄºÔ∏è–í —á–∞—Ç–µ <i>{message.chat.title}</i> –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ' \
                    f'—Å–æ–¥–µ—Ä–∂–∞—â–µ–µ <b>—Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏</b> –∏–ª–∏ <b>—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è</b>‚ÄºÔ∏èüö®\n\n' \
                    f'<b>{message.from_user.first_name + " " + message.from_user.last_name}</b> ' \
                    f'({message.from_user.username}) ‚Äî <i>{message.date}</i>\n' \
                    f'<blockquote>{message.text}</blockquote>\n\n' \
                    f'–°–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç <b>—Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏</b> –∏–ª–∏ <b>—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å–∏–ª–∏—è</b>?'

                if 'muted.json' not in os.listdir('./data/'):
                    clean_mutedb()
                with open('./data/muted.json', 'r') as f:
                    db = json.load(f)
                    muted = db['ids']

                # sends attention to every admin excluding from muted
                for admin in admins:
                    if admin.user.id not in muted:
                        await bot.send_message(admin.user.id, response, parse_mode="HTML", reply_markup=inline_kb)
        else:
            if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú':
                response = ('<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n–ê–≤—Ç–æ—Ä: –ë–æ—Ä–∏—Å –Ø–∫—É–±—Å–æ–Ω (–ù–ò–£ –í–®–≠)\n\n'
                            '–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã—Ö'
                            ' –º—ã—Å–ª–µ–π. –ë–æ—Ç –º–æ–∂–µ—Ç –¥–æ–æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–æ–¥'
                            ' –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ <a href="https://github.com/jeraidho/wellb-aware">GitHub-—Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞</a>'
                            '\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:</b> @siponeis')
                await message.reply(response, parse_mode='HTML', reply_markup=greet_kb)
            elif message.text == '–û—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüö´':

                # open muted list
                if 'muted.json' not in os.listdir('./data/'):
                    clean_mutedb()
                with open('./data/muted.json', 'r') as f:
                    db = json.load(f)

                id = message.from_user.id
                if id not in db['ids']:
                    db['ids'].append(id)
                    await message.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã‚ùå')
                else:
                    db['ids'].remove(id)
                    await message.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã‚úÖ')

                # save json
                with open('./data/muted.json', 'w') as f:
                    json.dump(db, f)
            elif message.text == '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞':
                testing_mode_users[message.from_user.id] = True
                response = ('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏!\n\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç'
                            ' –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∫–∞–∫ –≤ –≥—Ä—É–ø–ø–µ\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°—Ç–æ–ø‚ùå')
                await message.reply(response, reply_markup=testing_kb)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('button') or c.data.startswith('inline'))
async def process_callback(callback_query: types.CallbackQuery):
    global path
    code = callback_query.data.split('_')[1]
    # answer to user
    await bot.answer_callback_query(callback_query.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!')
    sleep(0.2)

    # collecting message
    message = preprocess(callback_query.message.text.split('\n')[3]) \
            if callback_query.data.startswith('button') else preprocess(callback_query.message.text.split('\n')[0])
    if callback_query.data.startswith('button'):
        await callback_query.message.delete()
    else:
        await callback_query.message.delete_reply_markup()
    # add sentences in database for training model
    if 'dataset.json' not in os.listdir('./data/'):
        clean_db()
    with open(path, 'r') as f:
        db = json.load(f)
    if message not in db:
        db[message] = 1 if code == 'yes' else -1
    else:
        if code == 'yes':
            db[message] += 1
        else:
            db[message] -= 1
    with open(path, 'w') as f:
        json.dump(db, f)


# start the bot
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
